#!/bin/sh
#
# Copyright 2008, IM Kit Team.
# Distributed under the terms of the MIT License.
#
# Authors:
#		Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
#

current_dir=`pwd`

debug=1
checkmem=0
is_haiku=0
ssl_incdir=""
ssl_libdir=""
defines=""

# Argument parsing
while [ $# != 0 ]; do
	flag="$1"
	case "$flag" in
		--disable-debug) debug=0 ;;
		--check-mem) checkmem=1 ;;
		*)
			echo "Usage: $0 [OPTION]..."
			echo -e "\t-h, --help\t\tShow this usage information"
			echo -e "\t--check-mem\t\tEnable memory checking"
			echo -e "\t--disable-debug\t\tDisable debugging"
			exit 1
		;;
	esac
	shift
done

# Binaries
jambin=`which jam`
rcbin=`which rc`
xresbin=`which xres`
settypebin=`which settype`
mimesetbin=`which mimeset`
setversionbin=`which setversion`
copyattrbin=`which copyattr`

# Libraries
have_infopopper=0

# Get common directories
common_bindir=`finddir B_COMMON_BIN_DIRECTORY`
common_libdir=`finddir B_COMMON_LIB_DIRECTORY`
common_serversdir=`finddir B_COMMON_SERVERS_DIRECTORY`
common_devdir=`finddir B_COMMON_DEVELOP_DIRECTORY`

# Check whether jam exists
echo -n "Checking whether jam exists... "
if [ -z "$jambin" ]; then
	echo "not found"
	echo "*** IM Kit requires jam, please read our Build.txt file."
	exit 1
else
	echo "found"
fi

# Check operating system
system=`uname -s`
release=`uname -r`
echo -n "Checking operating system... "
case "$system" in
	BeOS)
		echo "*** Neither BeOS nor Zeta are supported anymore!"
		echo "*** The future is coming and it is Haiku!"
		exit 1
	;;
	Haiku)
		is_haiku=1
		echo "$system $release"
	;;
	*)
		echo "*** Unsupported $system operating system."
		exit 1
	;;
esac

# Check for rc
echo -n "Checking for rc... "
if [ -z "$rcbin" ]; then
	echo "not found"
	exit 1
fi
echo $rcbin

# Check for xres
echo -n "Checking for xres..."
if [ -z "$xresbin" ]; then
	echo "not found"
	exit 1
fi
echo $xresbin

# Check for settype
echo -n "Checking for settype..."
if [ -z "$settypebin" ]; then
	echo "not found"
	exit 1
fi
echo $settypebin

# Check for mimeset
echo -n "Checking for mimeset..."
if [ -z "$mimesetbin" ]; then
	echo "not found"
	exit 1
fi
echo $mimesetbin

# Check for setverion
echo -n "Checking for setversion..."
if [ -z "$setversionbin" ]; then
	echo "not found"
	exit 1
fi
echo $setversionbin

# Check for copyattr
echo -n "Checking for copyattr..."
if [ -z "$copyattrbin" ]; then
	echo "not found"
	exit 1
fi
echo $copyattrbin

# Check for OpenSSL headers
echo -n "Checking for OpenSSL headers..."
if [ -f /boot/develop/headers/openssl/ssl.h -o \
     -f /boot/home/config/include/openssl/ssl.h ]; then
	echo "found"
	[ -f /boot/develop/headers/openssl/ssl.h ] && ssl_incdir=/boot/develop/headers
	[ -f /boot/home/config/include/openssl/ssl.h ] && ssl_incdir=/boot/home/config/include
else
	echo "not found"
	echo "*** IM Kit requires OpenSSL, please read our INSTALL file."
	exit 1
fi

# Check for OpenSSL libraries
echo -n "Checking for OpenSSL libraries..."
if [ -f /boot/home/config/lib/libssl.so -a \
     -f /boot/home/config/lib/libcrypto.so ]; then
	echo "found"
	ssl_libdir=/boot/home/config/lib
else
	echo "not found"
	echo "*** IM Kit requires OpenSSL, please read our INSTALL file."
	exit 1
fi

# Check for InfoPopper
echo -n "Checking for InfoPopper..."
if [ -f $common_libdir/libinfopopper.so -o \
     -f $common_devdir/headers/libinfopopper/InfoPopper.h ]; then
	echo "found"
	have_infopopper=1
else
	echo "not found"
	have_infopopper=0
fi

# Create the build configuration
cat > $current_dir/BuildConfig << EOF
IMKIT_DEBUG = ${debug} ;
IMKIT_CHECKMEM = ${checkmem} ;
IMKIT_OPENSSL_INCDIR = ${ssl_incdir} ;
IMKIT_OPENSSL_LIBDIR = ${ssl_libdir} ;
IMKIT_COMMON_BIN_DIRECTORY = ${common_bindir} ;
IMKIT_COMMON_LIB_DIRECTORY = ${common_libdir} ;
IMKIT_COMMON_SERVERS_DIRECTORY = ${common_serversdir} ;

IMKIT_BUILD_DATE = `date +"%Y-%m-%d"` ;
IMKIT_BUILD_REVISION = `svnversion` ;

IMKIT_IS_HAIKU = 1 ;
IMKIT_HAVE_INFOPOPPER = ${have_infopopper} ;

RC = ${rcbin} ;
XRES = ${xresbin} ;
SETTYPE = ${settypebin} ;
MIMESET = ${mimesetbin} ;
SETVERSION = ${setversionbin} ;
COPYATTR = ${copyattrbin} ;

DEFINES += HAIKU_TARGET_PLATFORM_HAIKU=1 HAIKU=1 ;
EOF

echo "Configuration done."
